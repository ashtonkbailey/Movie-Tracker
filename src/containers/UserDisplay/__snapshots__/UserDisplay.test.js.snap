// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserDisplay UserDisplay Component should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserDisplay
    clearFavorites={[MockFunction]}
    logOutUser={[MockFunction]}
    user={
      Object {
        "email": "bob@gmail.com",
        "name": "Bob",
        "password": "bob",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Link
        onClick={[Function]}
        replace={false}
        to="/"
      >
        <button
          className="control"
        >
          Log Out
        </button>
      </Link>,
      "className": "user-display",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <button
          className="control"
        >
          Log Out
        </button>,
        "onClick": [Function],
        "replace": false,
        "to": "/",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Log Out",
          "className": "control",
        },
        "ref": null,
        "rendered": "Log Out",
        "type": "button",
      },
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Link
          onClick={[Function]}
          replace={false}
          to="/"
        >
          <button
            className="control"
          >
            Log Out
          </button>
        </Link>,
        "className": "user-display",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <button
            className="control"
          >
            Log Out
          </button>,
          "onClick": [Function],
          "replace": false,
          "to": "/",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Log Out",
            "className": "control",
          },
          "ref": null,
          "rendered": "Log Out",
          "type": "button",
        },
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`UserDisplay UserDisplay Component should match the snapshot with no user 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserDisplay
    clearFavorites={[MockFunction]}
    logOutUser={[MockFunction]}
    user={
      Object {
        "email": "",
        "name": "",
        "password": "",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="control-btns"
      >
        <Link
          replace={false}
          to="/signup"
        >
          <button
            className="control"
          >
            Sign Up
          </button>
        </Link>
        <Link
          replace={false}
          to="/login"
        >
          <button
            className="control"
          >
            Log In
          </button>
        </Link>
      </div>,
      "className": "user-display",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Link
            replace={false}
            to="/signup"
          >
            <button
              className="control"
            >
              Sign Up
            </button>
          </Link>,
          <Link
            replace={false}
            to="/login"
          >
            <button
              className="control"
            >
              Log In
            </button>
          </Link>,
        ],
        "className": "control-btns",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <button
              className="control"
            >
              Sign Up
            </button>,
            "replace": false,
            "to": "/signup",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Sign Up",
              "className": "control",
            },
            "ref": null,
            "rendered": "Sign Up",
            "type": "button",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <button
              className="control"
            >
              Log In
            </button>,
            "replace": false,
            "to": "/login",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Log In",
              "className": "control",
            },
            "ref": null,
            "rendered": "Log In",
            "type": "button",
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="control-btns"
        >
          <Link
            replace={false}
            to="/signup"
          >
            <button
              className="control"
            >
              Sign Up
            </button>
          </Link>
          <Link
            replace={false}
            to="/login"
          >
            <button
              className="control"
            >
              Log In
            </button>
          </Link>
        </div>,
        "className": "user-display",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Link
              replace={false}
              to="/signup"
            >
              <button
                className="control"
              >
                Sign Up
              </button>
            </Link>,
            <Link
              replace={false}
              to="/login"
            >
              <button
                className="control"
              >
                Log In
              </button>
            </Link>,
          ],
          "className": "control-btns",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <button
                className="control"
              >
                Sign Up
              </button>,
              "replace": false,
              "to": "/signup",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Sign Up",
                "className": "control",
              },
              "ref": null,
              "rendered": "Sign Up",
              "type": "button",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <button
                className="control"
              >
                Log In
              </button>,
              "replace": false,
              "to": "/login",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Log In",
                "className": "control",
              },
              "ref": null,
              "rendered": "Log In",
              "type": "button",
            },
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
